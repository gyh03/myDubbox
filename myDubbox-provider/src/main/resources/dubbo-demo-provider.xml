<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="demo-provider"/>

    <!-- 使用zookeeper集群广播注册中心暴露服务地址 -->
    <dubbo:registry  address="zookeeper://127.0.0.1:2181"/>
<!--     <dubbo:registry  address="zookeeper://192.168.59.128:2181?backup=192.168.59.129:2181,192.168.59.130:2181"/> -->

    <!-- 用rest协议在8080端口暴露服务
    	server选择tomcat作为rest server的实现(REST的性能比jetty上要好得多)，默认为jetty，需要在pom文件中引入tomcat并指定为本地tomcat的版本号
    	dubbox-provider为基础相对路径，即java web应用中常说的context path，访问rest地址时需要加上如：http://127.0.0.1:8088/dubbox-provider/user/getUsers
    	accepts可以配置服务器提供端所能同时接收的最大HTTP连接数，防止REST server被过多连接撑爆，以作为一种最基本的自我保护机制
    	serialization 序列化方式，使用kryo时，需要将对象注入到dubbo系统中
    	extension扩展类型，可以指定filter和Interceptor，多个用,隔开
     -->
    <dubbo:protocol name="rest" port="8088" server="tomcat" contextpath="dubbox-provider" accepts="500"
     serialization="kryo" optimizer="com.gyh.serialization.SerializationOptimizerImpl"/>
    
    <dubbo:provider filter="DubboServiceFilter"></dubbo:provider>

    <!-- 和本地bean一样实现服务 使用spring注解方式注入spring容器 -->
   <!--  <bean id="userService" class="com.gyh.provider.UserServiceImpl"/> -->

    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="com.gyh.api.UserService" ref="userServiceImpl" retries="0" />

</beans>